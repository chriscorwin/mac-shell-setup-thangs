# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
export PATH=$HOME/bin:/usr/local/bin:/bin:/sbin:/usr/bin:/usr/local/sbin:$PATH

export PATH="./node_modules/.bin:$PATH"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

export BASH_SILENCE_DEPRECATION_WARNING=1

## Print a horizontal rule
rule () {
	printf -v _hr "%*s" $(tput cols) && echo ${_hr// /${1--}}
}
## Print a more different horizontal rule
ruleHeading () {
	printf -v _hr "%*s" $(tput cols) && echo ${_hr// /${1--}}
}



source ~/.profile

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Set badge to show the current session name and git branch, if any is set.
printf "\e]1337;SetBadgeFormat=%s\a" \
  $(echo -n "\(session.name) \(user.gitBranch)" | base64)


export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD



if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi



string="$PWD";

if [[ $string =~ .*Workspaces.* ]]
then
	export PROMPT_COMMAND='echo -ne "\033]0;${PWD/\/Users\/ccorwin\/Workspaces\//}\007"'
fi

if [[ $string =~ .*demuxe.* ]]
then
	export PROMPT_COMMAND='echo -ne "\033]0;${PWD/\/Users\/ccorwin\/demuxe REULS\//}\007"'
fi



# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Append to the Bash history file, rather than overwriting it
shopt -s histappend;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2> /dev/null;
done;

# Add tab completion for many Bash commands
if which brew > /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
	source "$(brew --prefix)/share/bash-completion/bash_completion";
elif [ -f /etc/bash_completion ]; then
	source /etc/bash_completion;
fi;

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"





for file in ~/.bash_extras.d_link/*

do
	if [ -d "$file" ]; then
		# echo "Is a directory: $file";
		for file2 in $file
		do
			if [ -d "$file2" ]; then
				# echo "Is a directory 2: $file2";
				for file3 in $file2/*
				do
					if [ -d "$file3" ]; then
						# echo "Is a directory 3: $file3";
						for file4 in $file3/*
						do
							if [ -d "$file4" ]; then
								# echo "Is a directory 4: $file4";
								for file5 in $file4/*
								do
									if [ -d "$file5" ]; then
										# echo "Is a directory 5: $file5";
										continue
									else
										# echo "Is a file 5: $file5";
										echo "${B}${COL_MAGENTA}.bash_profile will source: ${STYLE_INPUT}${file5}${X}"
										source $file5
										rule;
									fi
								done
								continue
							else
								# echo "Is a file 4: $file4";
								echo "${B}${COL_MAGENTA}.bash_profile will source: ${STYLE_INPUT}${file4}${X}"
								source $file4
								rule;
							fi
						done
						continue
					else
						# echo "Is a file 3: $file3";
						echo "${B}${COL_MAGENTA}.bash_profile will source: ${STYLE_INPUT}${file3}${X}"
						source $file3
						rule;
					fi
				done
				continue
			else
				# echo "Is a file 2: $file2";
				echo "${B}${COL_MAGENTA}.bash_profile will source: ${STYLE_INPUT}${file2}${X}"
				source $file2
				rule;
			fi
		done
		continue
	else
		# echo "Is a file: $file";
		echo "${B}${COL_MAGENTA}.bash_profile will source: ${STYLE_INPUT}${file}${X}"
		source $file

	fi
done

rule ðŸ›´

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ccorwin/Documents/Utilities/google-cloud-sdk/path.bash.inc' ]; then . '/Users/ccorwin/Documents/Utilities/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ccorwin/Documents/Utilities/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/ccorwin/Documents/Utilities/google-cloud-sdk/completion.bash.inc'; fi

# cd ~/demuxe && echo "Welcome, your current directory is:" && pwd && echo "" && echo
export NVM_DIR="$HOME/.nvm"
